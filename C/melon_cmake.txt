cmake_minimum_required(VERSION 3.10)

project(Melon)
set(CMAKE_BUILD_PARALLEL_LEVEL 4)

include_directories(include)

#file(GLOB SOURCES "src/*.c")

set(SOURCES
src/mln_aes.c
src/mln_alloc.c
src/mln_array.c
src/mln_asn1.c
src/mln_base64.c
src/mln_bignum.c
src/mln_chain.c
src/mln_class.c
src/mln_connection.c
src/mln_des.c
src/mln_error.c
src/mln_fec.c
src/mln_fheap.c
src/mln_file.c
src/mln_fork.c
src/mln_func.c
src/mln_gc.c
src/mln_hash.c
src/mln_http.c
src/mln_json.c
src/mln_list.c
src/mln_matrix.c
src/mln_md5.c
src/mln_path.c
src/mln_prime_generator.c
src/mln_queue.c
src/mln_rbtree.c
src/mln_rc.c
src/mln_regexp.c
src/mln_rs.c
src/mln_sha.c
src/mln_span.c
src/mln_stack.c
src/mln_string.c
src/mln_tools.c
src/mln_trace.c
src/mln_utils.c
src/mln_websocket.c
  )

set (unsupport_c
  
src/mln_conf.c
src/mln_cron.c
src/mln_event.c
src/mln_expr.c
src/mln_framework.c
src/mln_iothread.c
src/mln_ipc.c
src/mln_lang.c
src/mln_lang_array.c
src/mln_lang_ast.c
src/mln_lang_bool.c
src/mln_lang_func.c
src/mln_lang_int.c
src/mln_lang_nil.c
src/mln_lang_obj.c
src/mln_lang_real.c
src/mln_lang_str.c
src/mln_lex.c
src/mln_log.c
src/mln_parser_generator.c
src/mln_rsa.c
src/mln_thread.c
src/mln_thread_pool.c
  
  )

set( TSRC 
t/aes.c
t/alloc.c
t/array.c
t/base64.c
t/bignum.c
t/chain.c
t/class.c
t/connection.c
t/des.c
t/error.c
t/fheap.c
t/file.c
t/hash.c
t/http.c
t/json.c
t/matrix.c
t/list.c
t/md5.c
t/path.c
t/prime_generator.c
t/queue.c
t/rbtree.c
t/rc.c
t/regexp.c
t/rs.c
t/sha.c
t/stack.c
t/string.c
  )

set (unsupport 
t/conf.c
t/cron.c
t/event.c
t/expr.c
t/framework.c
t/iothread.c
t/ipc.c
t/lang.c
t/lex.c
t/log.c
t/parser_generator.c
t/thread.c
t/thread_pool.c
t/rsa.c
  )

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -save-temps=obj  -Wall -Werror -Wno-unused-result -Wno-unused-variable -O3 -fPIC -DMLN_ROOT=\\\"/usr/local/melon\\\" -DMLN_NULL=\\\"/dev/null\\\" -DMLN_LANG_LIB=\\\"/usr/local/lib/melang\\\" -DMLN_LANG_DYLIB=\\\"/usr/local/lib/melang_dynamic\\\" -DMLN_FUNC_FLAG ")


add_library(melon_static STATIC ${SOURCES})

#add_library(melon SHARED ${SOURCES})

#set_target_properties(melon PROPERTIES OUTPUT_NAME "melon")
#set_target_properties(melon PROPERTIES OUTPUT_NAME "melon")

foreach(src IN ITEMS ${TSRC})

  get_filename_component(exec_name ${src} NAME_WE)
  add_executable(${exec_name} ${src})
  target_link_libraries(${exec_name} melon_static)

endforeach()

